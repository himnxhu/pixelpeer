// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";
import { WebSocketServer, WebSocket } from "ws";

// server/storage.ts
import { randomUUID } from "crypto";
var MemStorage = class {
  users;
  rooms;
  messages;
  constructor() {
    this.users = /* @__PURE__ */ new Map();
    this.rooms = /* @__PURE__ */ new Map();
    this.messages = /* @__PURE__ */ new Map();
  }
  async getUser(id) {
    return this.users.get(id);
  }
  async getUserByUsername(username) {
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }
  async createUser(insertUser) {
    const id = randomUUID();
    const user = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
  async createRoom(insertRoom) {
    const id = randomUUID();
    const room = {
      id,
      peer1: insertRoom.peer1 || null,
      peer2: insertRoom.peer2 || null,
      isActive: true,
      createdAt: /* @__PURE__ */ new Date()
    };
    this.rooms.set(id, room);
    return room;
  }
  async getRoom(id) {
    return this.rooms.get(id);
  }
  async updateRoom(id, updates) {
    const room = this.rooms.get(id);
    if (!room) return void 0;
    const updatedRoom = { ...room, ...updates };
    this.rooms.set(id, updatedRoom);
    return updatedRoom;
  }
  async getActiveRooms() {
    return Array.from(this.rooms.values()).filter((room) => room.isActive);
  }
  async findAvailableRoom() {
    return Array.from(this.rooms.values()).find(
      (room) => room.isActive && room.peer1 && !room.peer2
    );
  }
  async addMessage(insertMessage) {
    const id = randomUUID();
    const message = {
      id,
      roomId: insertMessage.roomId || null,
      senderId: insertMessage.senderId || null,
      content: insertMessage.content,
      timestamp: /* @__PURE__ */ new Date()
    };
    this.messages.set(id, message);
    return message;
  }
  async getRoomMessages(roomId) {
    return Array.from(this.messages.values()).filter((message) => message.roomId === roomId).sort((a, b) => (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0));
  }
  async deactivateRoom(roomId) {
    const room = this.rooms.get(roomId);
    if (room) {
      room.isActive = false;
      this.rooms.set(roomId, room);
    }
  }
};
var storage = new MemStorage();

// shared/schema.ts
import { sql } from "drizzle-orm";
import { pgTable, text, varchar, timestamp, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  password: text("password").notNull()
});
var rooms = pgTable("rooms", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  peer1: varchar("peer1"),
  peer2: varchar("peer2"),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow()
});
var messages = pgTable("messages", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  roomId: varchar("room_id").references(() => rooms.id),
  senderId: varchar("sender_id"),
  content: text("content").notNull(),
  timestamp: timestamp("timestamp").defaultNow()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true
});
var insertRoomSchema = createInsertSchema(rooms).omit({
  id: true,
  createdAt: true
});
var insertMessageSchema = createInsertSchema(messages).omit({
  id: true,
  timestamp: true
});

// server/routes.ts
async function registerRoutes(app2) {
  const httpServer = createServer(app2);
  const wss = new WebSocketServer({ server: httpServer, path: "/ws" });
  const clients = /* @__PURE__ */ new Map();
  const waitingQueue = [];
  wss.on("connection", (ws) => {
    ws.id = generateId();
    clients.set(ws.id, ws);
    console.log(`Client ${ws.id} connected`);
    ws.on("message", async (data) => {
      try {
        const message = JSON.parse(data.toString());
        await handleWebSocketMessage(ws, message);
      } catch (error) {
        console.error("Error handling WebSocket message:", error);
        ws.send(JSON.stringify({ type: "error", message: "Invalid message format" }));
      }
    });
    ws.on("close", () => {
      console.log(`Client ${ws.id} disconnected`);
      handleClientDisconnect(ws);
      clients.delete(ws.id);
    });
    ws.on("error", (error) => {
      console.error(`WebSocket error for client ${ws.id}:`, error);
    });
  });
  async function handleWebSocketMessage(ws, message) {
    switch (message.type) {
      case "find-peer":
        await handleFindPeer(ws);
        break;
      case "webrtc-offer":
      case "webrtc-answer":
      case "webrtc-ice-candidate":
        await handleWebRTCSignaling(ws, message);
        break;
      case "chat-message":
        await handleChatMessage(ws, message);
        break;
      case "disconnect":
        await handleDisconnect(ws);
        break;
      default:
        ws.send(JSON.stringify({ type: "error", message: "Unknown message type" }));
    }
  }
  async function handleFindPeer(ws) {
    let room = await storage.findAvailableRoom();
    if (room) {
      const updatedRoom = await storage.updateRoom(room.id, { peer2: ws.id });
      if (updatedRoom) {
        ws.roomId = updatedRoom.id;
        ws.peerId = "peer2";
        const peer1 = clients.get(updatedRoom.peer1);
        if (peer1 && peer1.readyState === WebSocket.OPEN) {
          peer1.send(JSON.stringify({
            type: "peer-found",
            roomId: updatedRoom.id,
            peerId: "peer1",
            remotePeerId: ws.id
          }));
        }
        ws.send(JSON.stringify({
          type: "peer-found",
          roomId: updatedRoom.id,
          peerId: "peer2",
          remotePeerId: updatedRoom.peer1
        }));
      }
    } else {
      room = await storage.createRoom({ peer1: ws.id, peer2: null });
      ws.roomId = room.id;
      ws.peerId = "peer1";
      ws.send(JSON.stringify({
        type: "waiting-for-peer",
        roomId: room.id,
        peerId: "peer1"
      }));
    }
  }
  async function handleWebRTCSignaling(ws, message) {
    if (!ws.roomId) return;
    const room = await storage.getRoom(ws.roomId);
    if (!room) return;
    const remotePeerId = ws.peerId === "peer1" ? room.peer2 : room.peer1;
    if (!remotePeerId) return;
    const remotePeer = clients.get(remotePeerId);
    if (remotePeer && remotePeer.readyState === WebSocket.OPEN) {
      remotePeer.send(JSON.stringify({
        ...message,
        senderId: ws.id
      }));
    }
  }
  async function handleChatMessage(ws, message) {
    if (!ws.roomId) return;
    try {
      const validatedMessage = insertMessageSchema.parse({
        roomId: ws.roomId,
        senderId: ws.id,
        content: message.content
      });
      const savedMessage = await storage.addMessage(validatedMessage);
      const room = await storage.getRoom(ws.roomId);
      if (!room) return;
      const participants = [room.peer1, room.peer2].filter(Boolean);
      participants.forEach((peerId) => {
        const peer = clients.get(peerId);
        if (peer && peer.readyState === WebSocket.OPEN) {
          peer.send(JSON.stringify({
            type: "chat-message",
            message: savedMessage
          }));
        }
      });
    } catch (error) {
      ws.send(JSON.stringify({ type: "error", message: "Invalid message format" }));
    }
  }
  async function handleDisconnect(ws) {
    await handleClientDisconnect(ws);
  }
  async function handleClientDisconnect(ws) {
    if (ws.roomId) {
      const room = await storage.getRoom(ws.roomId);
      if (room) {
        const otherPeerId = ws.peerId === "peer1" ? room.peer2 : room.peer1;
        if (otherPeerId) {
          const otherPeer = clients.get(otherPeerId);
          if (otherPeer && otherPeer.readyState === WebSocket.OPEN) {
            otherPeer.send(JSON.stringify({ type: "peer-disconnected" }));
            otherPeer.roomId = void 0;
            otherPeer.peerId = void 0;
          }
        }
        await storage.deactivateRoom(ws.roomId);
      }
    }
    const queueIndex = waitingQueue.indexOf(ws.id);
    if (queueIndex > -1) {
      waitingQueue.splice(queueIndex, 1);
    }
  }
  function generateId() {
    return Math.random().toString(36).substring(2) + Date.now().toString(36);
  }
  app2.get("/api/health", (req, res) => {
    res.json({ status: "ok", timestamp: (/* @__PURE__ */ new Date()).toISOString() });
  });
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "127.0.0.1",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();